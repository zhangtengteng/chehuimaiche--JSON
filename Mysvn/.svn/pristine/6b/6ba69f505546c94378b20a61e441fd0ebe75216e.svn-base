package com.chehui.maiche.login;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.chehui.maiche.BaseActivity;
import com.chehui.maiche.R;
import com.chehui.maiche.RegisterManager;
import com.chehui.maiche.comm.CommonData;
import com.chehui.maiche.custom.EditTextWithDel;
import com.chehui.maiche.custom.PickerView.onSelectListener;
import com.chehui.maiche.httpserve.HttpService;
import com.chehui.maiche.pop.PoPBlandWindowManager;
import com.chehui.maiche.utils.StringUtils;
import com.chehui.maiche.utils.ToastUtils;
import com.chehui.maiche.utils.Utils;

/**
 * @author zzp
 *         <P>
 *         填写详细注册信息post
 *         <P>
 */
public class RegSellerRegisterActivity extends BaseActivity implements
		OnClickListener {

	private static final String TAG = "RegSellerRegisterActivity";
	private Button btn_register;
	private EditTextWithDel edt_name;
	private EditTextWithDel edt_checkpassword;
	private EditTextWithDel edt_password;
	private TextView edt_cityName;
	private TextView edt_brand;

	/** 获取應提交的品牌ID */
	public String postID;
	/** 从上一个界面获取的手机号 */
	public String phoneNum;

	private CityPicker cityPicker;
	/** 用户名 */
	private String username;
	/** 注册城市 */
	private String cityname;
	/** 品牌 */
	private String brand;
	/** 密码 */
	private String password;

	private String checkpassword;
	/** 品牌信息返回值 */
	private String json;

	public List<Map<String, String>> brandList = new ArrayList<Map<String, String>>();

	public Map<String, String> brandMap;

	private String regJson;

	private ImageView img_brand;
	private ImageView img_city;

	/** 品牌名称 */
	public List<String> choiceBrandName = new ArrayList<String>();

	/** 城市信息 */
	public List<String> cityList = new ArrayList<String>();

	/** 品牌ID */
	public Map<String, String> choiceBrandID = new HashMap<String, String>();

	private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case CommonData.HTTP_HANDLE_FAILE:
				Bundle data = msg.getData();
				String result = data.getString("mess");
				ToastUtils.showShortToast(RegSellerRegisterActivity.this,
						result);
				break;
			case CommonData.HTTP_HANDLE_SUCCESS:

				break;

			default:
				break;
			}

		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_regsellerregister);
		initTitleView(-1, 255, R.string.reg, 255, -1, 0);
		initData();
		initWidgets();
		initListener();
	}

	/**
	 * 初始化数据
	 */
	private void initData() {
		getALLBrandName();
		phoneNum = RegisterManager.getInstance().getTel();

	}

	/** 初始化组件 */
	private void initWidgets() {
		edt_name = (EditTextWithDel) findViewById(R.id.reg_edt_name);
		edt_password = (EditTextWithDel) findViewById(R.id.reg_edt_password);
		edt_brand = (TextView) findViewById(R.id.reg_edt_brand);
		edt_checkpassword = (EditTextWithDel) findViewById(R.id.reg_edt_checkpassword);

		edt_cityName = (TextView) findViewById(R.id.reg_edt_cityName);
		btn_register = (Button) findViewById(R.id.reg_btn_register);
		img_brand = (ImageView) findViewById(R.id.reg_img_brand);
		img_city = (ImageView) findViewById(R.id.reg_img_city);

		setPopWidth();
	}

	private void initListener() {
		img_city.setOnClickListener(this);
		btn_register.setOnClickListener(this);
		img_brand.setOnClickListener(this);

	}

	/***
	 * 获取品牌信息
	 */
	private void getALLBrandName() {
		if (!Utils.isNetworkAvailable(RegSellerRegisterActivity.this)) {
			ToastUtils.showShortToast(RegSellerRegisterActivity.this,
					R.string.common_network_unavalible);
			return;
		}

		new AsyncTask<Void, Integer, String>() {

			@Override
			protected String doInBackground(Void... params) {
				// 请求服务器
				final List<BasicNameValuePair> parameters = new ArrayList<BasicNameValuePair>();
				parameters.add(new BasicNameValuePair("classname",
						"UserOperationService"));
				parameters.add(new BasicNameValuePair("methodname",
						"GetALLBrandName"));
				String response = HttpService.methodPost(CommonData.HTTP_URL,
						parameters);
				return response;
			}

			@Override
			protected void onPostExecute(String result) {
				super.onPostExecute(result);

				if (result != null) {
					json = result.toString();
					Log.d(TAG + "返回品牌信息", json);
					analysisJson();
				} else {
					ToastUtils.showShortToast(RegSellerRegisterActivity.this,
							"网络无响应!");
				}

			}

		}.execute();

	}

	/***
	 * 泡泡窗口选择brand
	 * <P>
	 * choiceBrandName & choiceBrandID
	 * <P>
	 * 
	 * 
	 */
	private void popupChoiceBrand() {
		for (int i = 0; i < brandList.size(); i++) {
			choiceBrandName.add(brandList.get(i).get("BrandName"));
			choiceBrandID.put(brandList.get(i).get("BrandName"),
					brandList.get(i).get("ID"));
		}
		Log.d(TAG, choiceBrandName.toString());

	}

	/**
	 * 解析返回json数据
	 */
	private void analysisJson() {
		try {
			JSONObject jsonObject = new JSONObject(json);
			Boolean success = jsonObject.getBoolean("Success");
			String mess = jsonObject.getString("Mess");

			if (success != true) {
				Message msg = handler
						.obtainMessage(CommonData.HTTP_HANDLE_FAILE);
				Bundle data = msg.getData();
				data.putString("mess", mess);
				handler.sendMessage(msg);
				return;
			}
			// 解析data数据
			JSONArray jsonArray = jsonObject.getJSONArray("Data");
			brandList.clear();
			for (int i = 0; i < jsonArray.length(); i++) {
				JSONObject contentItem = jsonArray.getJSONObject(i);
				int ID = contentItem.getInt("ID");
				String BrandID = contentItem.getString("BrandID");
				String BrandName = contentItem.getString("BrandName");
				String State = contentItem.getString("State");
				String BrandABC = contentItem.getString("BrandABC");

				brandMap = new HashMap<String, String>();
				brandMap.put("ID", String.valueOf(ID));
				brandMap.put("BrandID", BrandID);
				brandMap.put("BrandName", BrandName);
				brandMap.put("State", State);
				brandMap.put("BrandABC", BrandABC);
				brandList.add(brandMap);
			}

		} catch (JSONException e) {
			e.printStackTrace();
		}
		Log.d(TAG, brandList.toString());
		for (int i = 0; i < brandList.size(); i++) {

			choiceBrandName.add(brandList.get(i).get("BrandName"));

			choiceBrandID.put(brandList.get(i).get("BrandName"),
					brandList.get(i).get("ID"));

		}

		Log.d(TAG, choiceBrandName.toString());
		Log.d(TAG, choiceBrandID.toString());
	}

	/***
	 * 设置pop的宽度
	 */
	private void setPopWidth() {
		@SuppressWarnings("deprecation")
		int width = getWindowManager().getDefaultDisplay().getWidth();
		@SuppressWarnings({ "deprecation", "unused" })
		int height = getWindowManager().getDefaultDisplay().getHeight();
		PoPBlandWindowManager.getInstance().init(getApplicationContext(),
				width, 500, R.layout.pop_bland);
	}

	/**
	 * 用户选中品牌，更新品牌栏文字
	 * 
	 * @param view
	 *            品牌
	 */
	public void setBrandText(final TextView view) {
		if (choiceBrandName == null) {
			ToastUtils.showShortToast(getApplicationContext(), "获取品牌信息失败！");
			popupChoiceBrand();

		}
		PoPBlandWindowManager.getInstance().setPickViewData(choiceBrandName);
		PoPBlandWindowManager.getInstance().changeOnSelect(
				new onSelectListener() {

					@Override
					public void onSelect(String text) {
						view.setText(text);

						postID = choiceBrandID.get(text.toString());

						Log.d(TAG + "品牌匹配ID",
								choiceBrandID.get(text.toString()));

					}
				});
		setPopWidth();
		PoPBlandWindowManager.getInstance().showPopAllLocation(view,
				Gravity.CENTER | Gravity.BOTTOM, 0, 0);

	}

	private void setCityText(final TextView view) {
		String dateStr1 = "南京";
		String dateStr2 = "天津";
		String dateStr3 = "上海";
		cityList.add(dateStr1);
		cityList.add(dateStr2);
		cityList.add(dateStr3);
		PoPBlandWindowManager.getInstance().setPickViewData(cityList);
		PoPBlandWindowManager.getInstance().changeOnSelect(
				new onSelectListener() {

					@Override
					public void onSelect(String text) {
						// 设置文字
						view.setText(text);

					}
				});
		setPopWidth();
		PoPBlandWindowManager.getInstance().showPopAllLocation(view,
				Gravity.CENTER | Gravity.BOTTOM, 0, 0);

	}

	/**
	 * 界面跳转
	 */
	@SuppressWarnings("static-access")
	private void startNextActivity() {
		activityManager.getInstance().startNextActivity(
				RegCompleteActivity.class);
	}

	/**
	 * 注册业务流程
	 */
	private void register() {
		username = edt_name.getText().toString().trim();
		cityname = edt_cityName.getText().toString().trim();
		brand = edt_brand.getText().toString().trim();
		password = edt_password.getText().toString().trim();
		checkpassword = edt_checkpassword.getText().toString().trim();
		String mail = "807853133@qq.com";
		String lastloginIP = " ";

		if (StringUtils.isEmpty(username) || StringUtils.isEmpty(brand)
				|| StringUtils.isEmpty(checkpassword)
				|| StringUtils.isEmpty(cityname)
				|| StringUtils.isEmpty(phoneNum)
				|| StringUtils.isEmpty(password)) {

			ToastUtils
					.showShortToast(RegSellerRegisterActivity.this, "请输入完整信息");

			return;
		}
		if (!password.equals(checkpassword)) {
			ToastUtils
					.showShortToast(RegSellerRegisterActivity.this, "确认密码不正确");

			return;
		}

		// 将密码存入实体类，下一个界面用
		RegisterManager.getInstance().setPassWord(checkpassword);

		String postParams = username + "|" + password + "|" + phoneNum + "|"
				+ mail + "|" + cityname + "|" + postID + "|" + postID + "|"
				+ postID + "|" + lastloginIP;

		sellerRegister(postParams);

	}

	/**
	 * 注册
	 */
	private void sellerRegister(final String postParams) {

		new AsyncTask<Void, Integer, String>() {

			@Override
			protected String doInBackground(Void... params) {
				// 请求服务器
				final List<BasicNameValuePair> parameters = new ArrayList<BasicNameValuePair>();
				parameters.add(new BasicNameValuePair("classname",
						"BaseInfoService"));
				parameters.add(new BasicNameValuePair("methodname",
						"SellerRegister"));
				parameters.add(new BasicNameValuePair("params", postParams));

				String response = HttpService.methodPost(CommonData.HTTP_URL,
						parameters);
				return response;

			}

			@Override
			protected void onPostExecute(String result) {
				super.onPostExecute(result);

				regJson = result.toString();
				Log.d(TAG + "注册返回信息", regJson);

				try {
					JSONObject jsonObject = new JSONObject(regJson);
					Boolean success = jsonObject.getBoolean("Success");
					String mess = jsonObject.getString("Mess");

					ToastUtils.showLongToast(RegSellerRegisterActivity.this,
							mess);
					if ("true".equals(String.valueOf(success).trim())) {
						startNextActivity();
					}

				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

		}.execute();

	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		// 城市选择器
		case R.id.reg_img_city:
			// mCityPopupWindow();作为下阶段备用方法
			setCityText(edt_cityName);
			break;
		// 注册
		case R.id.reg_btn_register:

			register();

			break;
		// 品牌选择
		case R.id.reg_img_brand:
			setBrandText(edt_brand);

			break;

		default:
			break;
		}
	}

	/**
	 * 城市选择器窗口
	 * 
	 * 暂时用不到作为备用
	 */
	public void mCityPopupWindow() {
		// 装载/res/layout/login.xml界面布局
		RelativeLayout loginForm = (RelativeLayout) getLayoutInflater()
				.inflate(R.layout.city_choice_layout, null);

		cityPicker = (CityPicker) loginForm.findViewById(R.id.citypicker);

		new AlertDialog.Builder(this)
		// 设置对话框显示的View对象
				.setView(loginForm)
				// 为对话框设置一个“确定”按钮
				.setPositiveButton("确定", new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						String sub = "";
						String choiceName = cityPicker.getCity_string();
						sub = choiceName.replaceAll("市辖区|县", "");
						edt_cityName.setText(sub);
					}
				})

				.setNegativeButton("取消", new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {

					}
				})
				// 创建、并显示对话框
				.create().show();

	}
}
