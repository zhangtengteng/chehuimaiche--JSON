package chehui.maichetong.useroperationservice;

import java.net.MalformedURLException;
import java.net.URL;
import org.jinouts.xml.namespace.QName;
import org.jinouts.xml.ws.WebEndpoint;
import org.jinouts.xml.ws.WebServiceClient;
import org.jinouts.xml.ws.WebServiceFeature;
import org.jinouts.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.4
 * 2015-07-07T22:03:19.105+08:00
 * Generated source version: 3.0.4
 * 
 */
@WebServiceClient(name = "UserOperationService", 
                  wsdlLocation = "http://ws.maichetong.chehui.com/UserOperationService.asmx?wsdl",
                  targetNamespace = "http://UserOperationService.maichetong.chehui/") 
public class UserOperationService extends org.jinouts.ws.JinosService {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://UserOperationService.maichetong.chehui/", "UserOperationService");
    public final static QName UserOperationServiceSoap12 = new QName("http://UserOperationService.maichetong.chehui/", "UserOperationServiceSoap12");
    public final static QName UserOperationServiceSoap = new QName("http://UserOperationService.maichetong.chehui/", "UserOperationServiceSoap");
    public final static QName UserOperationServiceHttpPost = new QName("http://UserOperationService.maichetong.chehui/", "UserOperationServiceHttpPost");
    public final static QName UserOperationServiceHttpGet = new QName("http://UserOperationService.maichetong.chehui/", "UserOperationServiceHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://ws.maichetong.chehui.com/UserOperationService.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(UserOperationService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://ws.maichetong.chehui.com/UserOperationService.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public UserOperationService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UserOperationService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UserOperationService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns UserOperationServiceSoap
     */
    @WebEndpoint(name = "UserOperationServiceSoap12")
    public UserOperationServiceSoap getUserOperationServiceSoap12() {
        return super.getPort(UserOperationServiceSoap12, UserOperationServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserOperationServiceSoap
     */
    @WebEndpoint(name = "UserOperationServiceSoap12")
    public UserOperationServiceSoap getUserOperationServiceSoap12(WebServiceFeature... features) {
        return super.getPort(UserOperationServiceSoap12, UserOperationServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns UserOperationServiceSoap
     */
    @WebEndpoint(name = "UserOperationServiceSoap")
    public UserOperationServiceSoap getUserOperationServiceSoap() {
        return super.getPort(UserOperationServiceSoap, UserOperationServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserOperationServiceSoap
     */
    @WebEndpoint(name = "UserOperationServiceSoap")
    public UserOperationServiceSoap getUserOperationServiceSoap(WebServiceFeature... features) {
        return super.getPort(UserOperationServiceSoap, UserOperationServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns UserOperationServiceHttpPost
     */
    @WebEndpoint(name = "UserOperationServiceHttpPost")
    public UserOperationServiceHttpPost getUserOperationServiceHttpPost() {
        return super.getPort(UserOperationServiceHttpPost, UserOperationServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserOperationServiceHttpPost
     */
    @WebEndpoint(name = "UserOperationServiceHttpPost")
    public UserOperationServiceHttpPost getUserOperationServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(UserOperationServiceHttpPost, UserOperationServiceHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns UserOperationServiceHttpGet
     */
    @WebEndpoint(name = "UserOperationServiceHttpGet")
    public UserOperationServiceHttpGet getUserOperationServiceHttpGet() {
        return super.getPort(UserOperationServiceHttpGet, UserOperationServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UserOperationServiceHttpGet
     */
    @WebEndpoint(name = "UserOperationServiceHttpGet")
    public UserOperationServiceHttpGet getUserOperationServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(UserOperationServiceHttpGet, UserOperationServiceHttpGet.class, features);
    }

}
